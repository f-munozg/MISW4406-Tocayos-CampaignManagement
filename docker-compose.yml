version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: cm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  pulsar:
    image: apachepulsar/pulsar:4.1.0
    container_name: cm-pulsar
    command: ["bin/pulsar", "standalone"]
    restart: unless-stopped
    ports:
      - "6650:6650"
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/admin/v2/brokers/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  # pulsar-init:
  #     image: apachepulsar/pulsar:3.1.0
  #     depends_on:
  #       - pulsar
  #     volumes:
  #       - ./scripts/init-pulsar.sh:/init-pulsar.sh
  #     command: ["sh", "/init-pulsar.sh"]

  pulsar-init:
    image: apachepulsar/pulsar:4.1.0
    depends_on:
      pulsar:
        condition: service_healthy
    environment:
      PULSAR_ADMIN_URL: http://pulsar:8080
    volumes:
      - ./scripts/init-pulsar.sh:/init-pulsar.sh:ro
    command: ["sh", "/init-pulsar.sh"]


  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cm-app
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@postgres:5432/appdb
      PULSAR_SERVICE_URL: pulsar://pulsar:6650
      PULSAR_NAMESPACE: campaign-management/events
      FLASK_ENV: production
      PYTHONPATH: /app/src
    volumes:
      - ./src:/app/src:ro
    ports:
      - "5000:5000"
    command: >
      bash -lc "
      gunicorn 'campaign_management.main:create_app()' -b 0.0.0.0:5000 -w 2
      "
    restart: unless-stopped

  campaigns-projection-consumer:
    build:
      context: .
      dockerfile: Dockerfile-projections
    container_name: cm-projection-consumer
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@postgres:5432/appdb
      PULSAR_SERVICE_URL: pulsar://pulsar:6650
      PULSAR_NAMESPACE: campaign-management/events
      PYTHONPATH: /app/src
    volumes:
      - ./src:/app/src:ro
    restart: unless-stopped

  outbox-dispatcher:
    build:
      context: .
      dockerfile: Dockerfile-outbox
    container_name: cm-outbox-dispatcher
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@postgres:5432/appdb
      PULSAR_SERVICE_URL: pulsar://pulsar:6650
      PULSAR_NAMESPACE: campaign-management/events
      PYTHONPATH: /app/src
    volumes:
      - ./src:/app/src:ro
    restart: unless-stopped



volumes:
  pg_data:
